import * as user from './user.js';
import * as keyboards from './keyboards.js';
import * as shop from './shop.js';
import config, { admin_ids, report_peer_id } from './config.js';
import { db } from './database.js';

export async function handleMessage(context, vk) {
    const userId = context.senderId;
    let currentUser;
    try {
        currentUser = await user.getUser(userId);
    } catch (e) {
        return context.send('–û—à–∏–±–∫–∞. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–¥–∏–∞. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.', { keyboard: keyboards.startKeyboard });
    }
    const text = context.text.toLowerCase();

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å'
    const cleanText = text.trim().toLowerCase().replace(/[^–∞-—èa-z—ë]/gi, '');
    if (cleanText === '–Ω–∞—á–∞—Ç—å') {
        if (currentUser.is_approved) {
            return context.send('üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', { keyboard: keyboards.mainMenuKeyboard });
        } else if (currentUser.state === 'waiting_verifing') {
            return context.send('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.', { keyboard: keyboards.startKeyboard });
        } else {
            return context.send('üìù –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É!', { keyboard: keyboards.startKeyboard });
        }
    }
    if (!currentUser.is_approved && ['–ø–ª–∞—Ç–Ω–æ–µ', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ', '—Å–µ–º—å–∏'].includes(text)) {
        let type = text === '—Å–µ–º—å–∏' ? '–°–µ–º—å–∏' : text === '–ø–ª–∞—Ç–Ω–æ–µ' ? '–ü–ª–∞—Ç–Ω–æ–µ' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ';
        if (type === '–°–µ–º—å–∏') {
            await user.setUserState(userId, 'awaiting_family_name', { type });
            return context.send('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–µ–º—å–∏:', { keyboard: keyboards.backToMainMenu() });
        } else {
            await user.setUserState(userId, 'awaiting_nickname', { type });
            return context.send(`üìù –í—ã –≤—ã–±—Ä–∞–ª–∏: ${type}.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:`, { keyboard: keyboards.backToMainMenu() });
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°, –∫—Ä–æ–º–µ /peerid –∏ /help
    if (context.peerId >= 2_000_000_000) {
        if (text.startsWith('/peerid') || text.startsWith('/help')) {
            return handleCommand(context, currentUser, vk);
        }
        return; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –±–µ—Å–µ–¥–µ
    }
    if (text.startsWith('/peerid')) return context.send(`peer_id —ç—Ç–æ–≥–æ —á–∞—Ç–∞: ${context.peerId}`);
    if (text.startsWith('/')) return handleCommand(context, currentUser, vk);
    if (currentUser.state && currentUser.state !== 'default') return handleState(context, currentUser, vk);
    return context.send('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.', {
        keyboard: currentUser.is_approved ? keyboards.mainMenuKeyboard : keyboards.startKeyboard
    });
}

export async function handlePayload(context, vk) {
    // payload –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—é, –º–∞–≥–∞–∑–∏–Ω–∞, –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç—á–µ—Ç–∞
    const userId = context.senderId;
    const payload = context.messagePayload;
    const currentUser = await user.getUser(userId);
    if (!payload) return;
    try { await context.editMessage({ keyboard: [] }); } catch (e) {}
    switch (payload.command) {
        case 'start_application_from_restart':
        case 'start_application': {
            const criteriaMsg =
                'üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –º–µ–¥–∏–∞:\n\n' +
                'üîπ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ:\n' +
                '‚Ä¢ 300+ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n' +
                '‚Ä¢ 20+ –ª–∞–π–∫–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö\n' +
                '‚Ä¢ 500+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ\n\n' +
                'üîπ –ü–ª–∞—Ç–Ω–æ–µ:\n' +
                '‚Ä¢ 1000+ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n' +
                '‚Ä¢ 50+ –ª–∞–π–∫–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö\n' +
                '‚Ä¢ 800+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ\n\n' +
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ –Ω–∏–∂–µ üëá';
            await context.send(criteriaMsg, { keyboard: keyboards.applicationTypeKeyboard });
            return;
        }
        case 'paid_application':
            await user.setUserState(userId, 'awaiting_nickname', { type: '–ü–ª–∞—Ç–Ω–æ–µ' });
            return context.send('üìù –í—ã –≤—ã–±—Ä–∞–ª–∏: –ü–ª–∞—Ç–Ω–æ–µ.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:', { keyboard: keyboards.backToMainMenu() });
        case 'free_application':
            await user.setUserState(userId, 'awaiting_nickname', { type: '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ' });
            return context.send('üìù –í—ã –≤—ã–±—Ä–∞–ª–∏: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:', { keyboard: keyboards.backToMainMenu() });
        case 'family_application':
            await user.setUserState(userId, 'awaiting_family_name', { type: '–°–µ–º—å–∏' });
            return context.send('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–µ–º—å–∏:', { keyboard: keyboards.backToMainMenu() });
        case 'back_to_start':
            await user.resetUserState(userId);
            return context.send('–û—à–∏–±–∫–∞. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–¥–∏–∞. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.', { keyboard: keyboards.startKeyboard });
        case 'main_menu':
            await user.resetUserState(userId);
            return context.send('üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { keyboard: keyboards.mainMenuKeyboard });
        case 'admin_menu':
            return handleAdminMenu(context, currentUser, vk);
        case 'shop_menu':
            return handleShopMenu(context, currentUser, vk);
        case 'shop_category':
            return handleShopCategory(context, currentUser, vk, payload.category, 1);
        case 'shop_page':
            return handleShopCategory(context, currentUser, vk, currentUser.state_data.category, payload.page);
        case 'shop_buy_item':
            await user.setUserState(userId, 'awaiting_shop_item_number', { ...currentUser.state_data });
            return context.send('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:', { keyboard: keyboards.backToCategories() });
        case 'report_menu':
            return handleReportMenu(context, currentUser, vk);
        case 'my_profile':
            return handleProfile(context, currentUser);
        default:
            return context.send('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
    }
}

async function handleState(context, currentUser, vk) {
    const userId = context.senderId;
    const text = context.text;
    switch (currentUser.state) {
        case 'awaiting_family_name':
            await user.updateUserStateData(userId, { family_name: text });
            await user.setUserState(userId, 'awaiting_leader_nickname', { ...currentUser.state_data, family_name: text });
            return context.send('üëë –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ª–∏–¥–µ—Ä–∞ —Å–µ–º—å–∏:', { keyboard: keyboards.backToMainMenu() });
        case 'awaiting_leader_nickname':
            await user.updateUserStateData(userId, { leader_nickname: text });
            await user.setUserState(userId, 'awaiting_channel_link', { ...currentUser.state_data, leader_nickname: text });
            return context.send('üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:', { keyboard: keyboards.backToMainMenu() });
        case 'awaiting_nickname':
            await user.updateUserStateData(userId, { nickname: text });
            await user.setUserState(userId, 'awaiting_channel_link', { ...currentUser.state_data, nickname: text });
            return context.send('üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:', { keyboard: keyboards.backToMainMenu() });
        case 'awaiting_channel_link':
            await user.updateUserStateData(userId, { channel_link: text });
            await submitCooperationApplication(context, vk);
            await db.query('UPDATE users SET state = ? WHERE vk_id = ?', ['waiting_verifing', userId]);
            await user.resetUserState(userId);
            return context.send('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', { keyboard: keyboards.startKeyboard });
        case 'awaiting_report':
            await db.query('INSERT INTO reports (user_vk_id, text) VALUES (?, ?)', [userId, text]);
            const [[lastReport]] = await db.query('SELECT id FROM reports WHERE user_vk_id = ? ORDER BY id DESC LIMIT 1', [userId]);
            const reportId = lastReport ? lastReport.id : '?';
            const msg = `üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç üÜî #${reportId}
üë§ vk.com/id${userId}
üí¨ –¢–µ–∫—Å—Ç:
${text}
–ë–∞–ª–∞–Ω—Å: ${currentUser.balance} MC | –ê–¥–º–∏–Ω–∫–∞: ${currentUser.admin_level} ‚≠ê

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /acceptreport ${reportId} 500 üëç –•–æ—Ä–æ—à!`;
            console.log('[REPORT][NEW]', msg);
            await vk.api.messages.send({ peer_id: report_peer_id, message: msg, random_id: Date.now() });
            await user.resetUserState(userId);
            return context.send('–í–∞—à –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', { keyboard: keyboards.mainMenuKeyboard });
        case 'awaiting_shop_item_number': {
            const itemId = parseInt(text, 10);
            if (isNaN(itemId)) return context.send('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.', { keyboard: keyboards.backToCategories() });
            const item = await shop.getItemById(itemId);
            if (!item) return context.send('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', { keyboard: keyboards.backToCategories() });
            await user.setUserState(userId, 'awaiting_shop_confirm', { ...currentUser.state_data, itemId });
            return context.send(`–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: ${item.name} –∑–∞ ${item.price} MC?\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".`, { keyboard: keyboards.backToCategories() });
        }
        case 'awaiting_shop_confirm': {
            if (text.toLowerCase() === '–¥–∞') {
                const item = await shop.getItemById(currentUser.state_data.itemId);
                if (!item) return context.send('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', { keyboard: keyboards.backToCategories() });
                if (currentUser.balance < item.price) return context.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.', { keyboard: keyboards.backToCategories() });
                await db.query('INSERT INTO shop_orders (user_vk_id, item_id, status) VALUES (?, ?, ?)', [userId, item.id, 'pending']);
                await user.changeBalance(userId, -item.price);
                await user.resetUserState(userId);
                const [[lastOrder]] = await db.query('SELECT id FROM shop_orders WHERE user_vk_id = ? ORDER BY id DESC LIMIT 1', [userId]);
                const orderId = lastOrder ? lastOrder.id : '?';
                const msg = `üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω üÜî #${orderId}
üë§ vk.com/id${userId}
–¢–æ–≤–∞—Ä: ${item.name} (${item.id})
–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /acceptshop ${orderId}`;
                console.log('[SHOP][NEW]', msg);
                await vk.api.messages.send({ peer_id: report_peer_id, message: msg, random_id: Date.now() });
                return context.send('–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!', { keyboard: keyboards.mainMenuKeyboard });
            } else if (text.toLowerCase() === '–Ω–µ—Ç') {
                await user.resetUserState(userId);
                return context.send('–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', { keyboard: keyboards.mainMenuKeyboard });
            } else {
                return context.send('–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', { keyboard: keyboards.backToCategories() });
            }
        }
        default:
            await user.resetUserState(userId);
            return context.send('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', { keyboard: keyboards.mainMenuKeyboard });
    }
}

async function handleShopMenu(context, currentUser, vk) {
    const categories = await shop.getShopCategories();
    await user.setUserState(currentUser.vk_id, 'shop_menu');
    return context.send('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', { keyboard: keyboards.shopCategoriesKeyboard(categories) });
}
async function handleShopCategory(context, currentUser, vk, category, page = 1) {
    const { items, total, limit } = await shop.getItemsByCategory(category, page, 5);
    const totalPages = Math.ceil(total / 5);
    await user.setUserState(currentUser.vk_id, 'shop_category', { category, page });
    let msg = `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${totalPages}\n`;
    items.forEach(item => {
        msg += `#${item.id} ${item.name} ‚Äî ${item.price} MC\n${item.description}\n`;
    });
    msg += '\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.';
    return context.send(msg, { keyboard: keyboards.shopItemsKeyboard(page, totalPages) });
}

async function handleProfile(context, currentUser) {
    const profileMessage = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n- –ë–∞–ª–∞–Ω—Å: ${currentUser.balance} MC üí∞\n- –£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏: ${currentUser.admin_level} ‚≠ê`;
    return context.send(profileMessage, { keyboard: keyboards.backToMainMenu() });
}

async function handleReportMenu(context, currentUser, vk) {
    await user.setUserState(currentUser.vk_id, 'awaiting_report');
    return context.send('–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –≤–∏–¥–µ–æ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞:', { keyboard: keyboards.backToMainMenu() });
}

async function handleAdminMenu(context, currentUser, vk) {
    // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ü–µ–Ω–Ω–∏–∫–æ–≤:
    const adminPrices = {
        1: 0,
        2: 125,
        3: 155,
        4: 215,
        5: 265,
        6: 310,
        7: 385,
        8: 450
    };
    if (currentUser.admin_level < 1) {
        // 1 –ª–≤–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ
        let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [currentUser.vk_id]);
        const [result] = await db.query('INSERT INTO admin_applications (user_vk_id, requested_level, status) VALUES (?, 1, ?)', [currentUser.vk_id, 'pending']);
        const applicationId = result.insertId;
        const msg = `üëë –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É üÜî #${applicationId}\nüë§ vk.com/id${currentUser.vk_id}\n–ù–∏–∫: ${userInfo?.nickname || '‚Äî'}\n–£—Ä–æ–≤–µ–Ω—å: 1 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${userInfo?.admin_level || 0}\n–ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC\nVK: vk.com/id${userInfo?.vk_id}\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /acceptadmin ${applicationId}`;
        await vk.api.messages.send({ peer_id: report_peer_id, message: msg, random_id: Date.now() });
        return context.send('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.', { keyboard: keyboards.mainMenuKeyboard });
    } else if (currentUser.admin_level >= 1 && currentUser.admin_level < 8) {
        const nextLevel = currentUser.admin_level + 1;
        const price = adminPrices[nextLevel];
        if (currentUser.balance < price) {
            return context.send(`–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ ${nextLevel} –ª–≤–ª –Ω—É–∂–Ω–æ ${price} MediaCoins.`, { keyboard: keyboards.mainMenuKeyboard });
        }
        let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [currentUser.vk_id]);
        const [result] = await db.query('INSERT INTO admin_applications (user_vk_id, requested_level, status) VALUES (?, ?, ?)', [currentUser.vk_id, nextLevel, 'pending']);
        const applicationId = result.insertId;
        const msg = `üëë –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É üÜî #${applicationId}\nüë§ vk.com/id${currentUser.vk_id}\n–ù–∏–∫: ${userInfo?.nickname || '‚Äî'}\n–£—Ä–æ–≤–µ–Ω—å: ${nextLevel} (${price} MC)\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${userInfo?.admin_level || 0}\n–ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC\nVK: vk.com/id${userInfo?.vk_id}\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /acceptadmin ${applicationId}`;
        await vk.api.messages.send({ peer_id: report_peer_id, message: msg, random_id: Date.now() });
        return context.send('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.', { keyboard: keyboards.mainMenuKeyboard });
    } else {
        return context.send('–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏.', { keyboard: keyboards.mainMenuKeyboard });
    }
}

async function handleCommand(context, currentUser, vk) {
    const [command, ...args] = context.text.slice(1).split(' ');
    const isAdmin = admin_ids.includes(currentUser.vk_id);
    if ([
        "acceptmedia", "acceptshop", "acceptadmin",
        "declinemedia", "declineshop", "declineadmin",
        "acceptreport"
    ].includes(command) && !isAdmin) {
        return context.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
    switch (command) {
        case 'acceptmedia': {
            const id = parseInt(args[0], 10);
            if (isNaN(id)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /acceptmedia [id]');
            await handleApplicationDecision(id, currentUser.vk_id, 'approved', vk, 'coop');
            return;
        }
        case 'declinemedia': {
            const id = parseInt(args[0], 10);
            if (isNaN(id)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /declinemedia [id]');
            await handleApplicationDecision(id, currentUser.vk_id, 'rejected', vk, 'coop');
            return;
        }
        case 'acceptadmin': {
            const id = parseInt(args[0], 10);
            if (isNaN(id)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /acceptadmin [id]');
            await handleApplicationDecision(id, currentUser.vk_id, 'approved', vk, 'admin');
            return;
        }
        case 'declineadmin': {
            const id = parseInt(args[0], 10);
            if (isNaN(id)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /declineadmin [id]');
            await handleApplicationDecision(id, currentUser.vk_id, 'rejected', vk, 'admin');
            return;
        }
        case 'acceptshop': {
            const id = parseInt(args[0], 10);
            if (isNaN(id)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /acceptshop [id]');
            await handleShopOrderDecision(id, currentUser.vk_id, 'approved', vk);
            return;
        }
        case 'declineshop': {
            const id = parseInt(args[0], 10);
            if (isNaN(id)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /declineshop [id]');
            await handleShopOrderDecision(id, currentUser.vk_id, 'rejected', vk);
            return;
        }
        case 'givemc':
        case 'takemc': {
            let targetArg = args[0];
            const amount = parseInt(args[1], 10);
            if (!targetArg || isNaN(amount)) {
                return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /givemc [@username, id –∏–ª–∏ vk_id] [—Å—É–º–º–∞] –∏–ª–∏ /takemc [@username, id –∏–ª–∏ vk_id] [—Å—É–º–º–∞]');
            }
            let targetUser = null;
            // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ ‚Äî –∏—â–µ–º –ø–æ id –∏–∑ –ë–î
            if (/^\d+$/.test(targetArg)) {
                let [[userById]] = await db.query('SELECT * FROM users WHERE id = ?', [parseInt(targetArg, 10)]);
                if (!userById) {
                    return context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
                targetUser = userById;
            } else if (targetArg.startsWith('@')) {
                const username = targetArg.replace('@', '').trim();
                try {
                    const userInfo = await vk.api.users.get({ user_ids: username });
                    if (userInfo && userInfo[0] && userInfo[0].id) {
                        let [[userByVkId]] = await db.query('SELECT * FROM users WHERE vk_id = ?', [userInfo[0].id]);
                        if (!userByVkId) {
                            return context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ç–µ–≥—É –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–æ—Ç–∞.');
                        }
                        targetUser = userByVkId;
                    } else {
                        return context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ç–µ–≥—É –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ VK.');
                    }
                } catch (e) {
                    console.log('[givemc/takemc][ERROR VK API]', e);
                    return context.send('–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–≥—É.');
                }
            } else {
                // –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ vk_id
                let vkIdToUse = parseInt(targetArg, 10);
                if (isNaN(vkIdToUse)) {
                    return context.send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π vk_id.');
                }
                let [[userByVkId]] = await db.query('SELECT * FROM users WHERE vk_id = ?', [vkIdToUse]);
                if (!userByVkId) {
                    return context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–æ—Ç–∞.');
                }
                targetUser = userByVkId;
            }
            await user.changeBalance(targetUser.vk_id, command === 'givemc' ? amount : -amount);
            await vk.api.messages.send({
                user_id: targetUser.vk_id,
                message: `${command === 'givemc' ? 'üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ' : 'üí∏ –£ –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ'} ${amount} MC –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!`,
                random_id: Date.now()
            });
            return context.send(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üÜî ${targetUser.id} (vk.com/id${targetUser.vk_id}) –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${command === 'givemc' ? '+' : '-'}${amount} MC.`);
        }
        case 'media': {
            const [users] = await db.query('SELECT id, vk_id, nickname, balance FROM users WHERE is_approved = 1');
            if (!users.length) return context.send('–ù–µ—Ç –º–µ–¥–∏–∞ –≤ –±–∞–∑–µ.');
            let msg = 'üìã –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞:\n';
            for (const u of users) {
                msg += `üÜî ${u.id} | vk.com/id${u.vk_id} | –ù–∏–∫: ${u.nickname || '‚Äî'} | –ë–∞–ª–∞–Ω—Å: ${u.balance} MC\n`;
            }
            console.log('[MEDIA][LIST]', msg);
            return context.send(msg);
        }
        case 'givemc_id':
        case 'takemc_id': {
            const id = parseInt(args[0], 10);
            const amount = parseInt(args[1], 10);
            if (isNaN(id) || isNaN(amount)) {
                return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /givemc_id [id] [—Å—É–º–º–∞] –∏–ª–∏ /takemc_id [id] [—Å—É–º–º–∞]');
            }
            let [[targetUser]] = await db.query('SELECT * FROM users WHERE id = ?', [id]);
            if (!targetUser) {
                return context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
            await user.changeBalance(targetUser.vk_id, command === 'givemc_id' ? amount : -amount);
            await vk.api.messages.send({
                user_id: targetUser.vk_id,
                message: `${command === 'givemc_id' ? 'üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ' : 'üí∏ –£ –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ'} ${amount} MC –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!`,
                random_id: Date.now()
            });
            console.log(`[givemc_id/takemc_id] –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üÜî ${targetUser.id} (vk.com/id${targetUser.vk_id}) –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${command === 'givemc_id' ? '+' : '-'}${amount} MC.`);
            return context.send(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üÜî ${targetUser.id} (vk.com/id${targetUser.vk_id}) –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${command === 'givemc_id' ? '+' : '-'}${amount} MC.`);
        }
        case 'reports': {
            const [reports] = await db.query('SELECT * FROM reports WHERE status = "pending"');
            if (!reports.length) return context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç—á—ë—Ç—ã.');
            let msg = 'üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç—á—ë—Ç—ã:\n';
            for (const r of reports) {
                let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [r.user_vk_id]);
                msg += `üÜî #${r.id} | vk.com/id${r.user_vk_id} | –ù–∏–∫: ${userInfo?.nickname || '‚Äî'} | –£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏: ${userInfo?.admin_level || 0} | –ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC | VK: vk.com/id${userInfo?.vk_id} | –¢–µ–∫—Å—Ç: ${(r.text || '').slice(0, 40)}...\n`;
            }
            return context.send(msg);
        }
        case 'medias': {
            const [apps] = await db.query('SELECT * FROM cooperation_applications WHERE status = "pending"');
            if (!apps.length) return context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ–¥–∏–∞.');
            let msg = 'üì• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ–¥–∏–∞:\n';
            for (const a of apps) {
                let data = {};
                try { data = JSON.parse(a.data); } catch {}
                let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [a.user_vk_id]);
                msg += `üÜî #${a.id} | vk.com/id${a.user_vk_id} | –ù–∏–∫: ${userInfo?.nickname || '‚Äî'} | –£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏: ${userInfo?.admin_level || 0} | –ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC | VK: vk.com/id${userInfo?.vk_id}\n`;
            }
            return context.send(msg);
        }
        case 'magaz': {
            const [orders] = await db.query('SELECT * FROM shop_orders WHERE status = "pending"');
            if (!orders.length) return context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω.');
            let msg = 'üõí –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω:\n';
            for (const o of orders) {
                let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [o.user_vk_id]);
                msg += `üÜî #${o.id} | vk.com/id${o.user_vk_id} | –ù–∏–∫: ${userInfo?.nickname || '‚Äî'} | –£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏: ${userInfo?.admin_level || 0} | –ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC | VK: vk.com/id${userInfo?.vk_id} | item_id: ${o.item_id}\n`;
            }
            return context.send(msg);
        }
        case 'vidal': {
            const orderId = parseInt(args[0], 10);
            if (isNaN(orderId)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vidal [id –∑–∞—è–≤–∫–∏]');
            await db.query('UPDATE shop_orders SET status = "completed" WHERE id = ?', [orderId]);
            return context.send(`–ó–∞—è–≤–∫–∞ #${orderId} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω–∞—è.`);
        }
        case 'acceptreport': {
            const id = parseInt(args[0], 10);
            const amount = parseInt(args[1], 10);
            const comment = args.slice(2).join(' ').trim();
            if (isNaN(id) || isNaN(amount) || !comment) {
                return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /acceptreport [id] [–∫–æ–ª-–≤–æ_–∫–æ–∏–Ω–æ–≤] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]');
            }
            await handleAcceptReport(id, amount, comment, vk, currentUser.vk_id);
            return;
        }
        case 'delmedia': {
            const id = parseInt(args[0], 10);
            const reason = args.slice(1).join(' ').trim();
            if (isNaN(id) || !reason) {
                return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delmedia [id] [–ø—Ä–∏—á–∏–Ω–∞]');
            }
            let [[targetUser]] = await db.query('SELECT * FROM users WHERE id = ?', [id]);
            if (!targetUser) {
                return context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
            await db.query('DELETE FROM users WHERE id = ?', [id]);
            await vk.api.messages.send({
                user_id: targetUser.vk_id,
                message: `‚ùå –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –ø–æ—Å—Ç–∞ –º–µ–¥–∏–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞!`,
                keyboard: keyboards.startKeyboard,
                random_id: Date.now()
            });
            await vk.api.messages.send({
                peer_id: report_peer_id,
                message: `‚ùå –ú–µ–¥–∏–∞ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã!\nüÜî ${targetUser.id} | vk.com/id${targetUser.vk_id} | –ù–∏–∫: ${targetUser.nickname || '‚Äî'}\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
                random_id: Date.now()
            });
            console.log(`[delmedia] –ú–µ–¥–∏–∞ id=${targetUser.id} vk_id=${targetUser.vk_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
            return context.send(`–ú–µ–¥–∏–∞ üÜî ${targetUser.id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.`);
        }
        case 'help': {
            // –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ
            if (context.peerId < 2_000_000_000) return;
            let msg = 'üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n';
            msg += 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:\n';
            msg += '‚Äî /media ‚Äî —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞\n';
            msg += '‚Äî /profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n';
            msg += '‚Äî /shop ‚Äî –º–∞–≥–∞–∑–∏–Ω\n';
            msg += '‚Äî /report ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç\n';
            msg += '‚Äî /peerid ‚Äî —É–∑–Ω–∞—Ç—å peer_id —á–∞—Ç–∞\n';
            msg += '‚Äî /reports ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç—á—ë—Ç—ã\n';
            msg += '‚Äî /medias ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ–¥–∏–∞\n';
            msg += '‚Äî /magaz ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞\n';
            msg += '\n';
            msg += 'üõ°Ô∏è –ê–¥–º–∏–Ω—Å–∫–∏–µ:\n';
            msg += '‚Äî /givemc id/–≤–∫/id @–Ω–∏–∫ —Å—É–º–º–∞ ‚Äî –≤—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã\n';
            msg += '‚Äî /takemc id/–≤–∫/id @–Ω–∏–∫ —Å—É–º–º–∞ ‚Äî –∑–∞–±—Ä–∞—Ç—å –∫–æ–∏–Ω—ã\n';
            msg += '‚Äî /givemc_id id —Å—É–º–º–∞ ‚Äî –≤—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã –ø–æ id\n';
            msg += '‚Äî /takemc_id id —Å—É–º–º–∞ ‚Äî –∑–∞–±—Ä–∞—Ç—å –∫–æ–∏–Ω—ã –ø–æ id\n';
            msg += '‚Äî /acceptmedia id ‚Äî –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–µ–¥–∏–∞\n';
            msg += '‚Äî /declinemedia id ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–µ–¥–∏–∞\n';
            msg += '‚Äî /acceptadmin id ‚Äî –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∫—É\n';
            msg += '‚Äî /declineadmin id ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∫—É\n';
            msg += '‚Äî /acceptshop id ‚Äî –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞\n';
            msg += '‚Äî /declineshop id ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞\n';
            msg += '‚Äî /acceptreport id —Å—É–º–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –æ–¥–æ–±—Ä–∏—Ç—å –æ—Ç—á–µ—Ç\n';
            msg += '‚Äî /magaz ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞\n';
            msg += '‚Äî /vidal id ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π\n';
            msg += '‚Äî /delmedia id –ø—Ä–∏—á–∏–Ω–∞ ‚Äî —Å–Ω—è—Ç—å –º–µ–¥–∏–∞ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n';
            msg += '\n';
            msg += '‚ÑπÔ∏è –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.';
            return context.send(msg);
        }
        case 'setplatka': {
            if (!isAdmin) return context.send('–ù–µ—Ç –ø—Ä–∞–≤.');
            const id = parseInt(args[0], 10);
            if (isNaN(id)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setplatka [idmedia]');
            let [[targetUser]] = await db.query('SELECT * FROM users WHERE id = ?', [id]);
            if (!targetUser) return context.send('–ú–µ–¥–∏–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            await db.query('UPDATE users SET media_type = 1 WHERE id = ?', [id]);
            await vk.api.messages.send({ user_id: targetUser.vk_id, message: '–í–∞—à–∞ –º–µ–¥–∏–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –ø–ª–∞—Ç–Ω—ã–µ!', random_id: Date.now() });
            return context.send('–ú–µ–¥–∏–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –ø–ª–∞—Ç–Ω—ã–µ.');
        }
        case 'setbesplatka': {
            if (!isAdmin) return context.send('–ù–µ—Ç –ø—Ä–∞–≤.');
            const id = parseInt(args[0], 10);
            if (isNaN(id)) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbesplatka [idmedia]');
            let [[targetUser]] = await db.query('SELECT * FROM users WHERE id = ?', [id]);
            if (!targetUser) return context.send('–ú–µ–¥–∏–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            await db.query('UPDATE users SET media_type = 0 WHERE id = ?', [id]);
            await vk.api.messages.send({ user_id: targetUser.vk_id, message: '–í–∞—à–∞ –º–µ–¥–∏–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ!', random_id: Date.now() });
            return context.send('–ú–µ–¥–∏–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ.');
        }
        case 'msgmedia': {
            if (!isAdmin) return context.send('–ù–µ—Ç –ø—Ä–∞–≤.');
            const text = args.join(' ').trim();
            if (!text) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /msgmedia [—Ç–µ–∫—Å—Ç]');
            await vk.api.messages.send({ peer_id: 2000000002, message: text, random_id: Date.now() });
            return context.send('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç.');
        }
        case 'startbot': {
            if (!isAdmin) return context.send('–ù–µ—Ç –ø—Ä–∞–≤.');
            const text = args.join(' ').trim();
            if (!text) return context.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /startbot [—Ç–µ–∫—Å—Ç]');
            const [users] = await db.query('SELECT vk_id FROM users');
            for (const u of users) {
                try {
                    await vk.api.messages.send({ user_id: u.vk_id, message: text, random_id: Date.now() });
                } catch (e) {}
            }
            return context.send('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        }
        default:
            return context.send('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
    }
}

async function submitCooperationApplication(context, vk) {
    const userId = context.senderId;
    const currentUser = await user.getUser(userId);
    const { type, ...data } = currentUser.state_data;
    if (!type) {
        await user.resetUserState(userId);
        return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –¢–∏–ø –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
    }
    const [result] = await db.query(
        'INSERT INTO cooperation_applications (user_vk_id, type, data, status) VALUES (?, ?, ?, ?)',
        [userId, type, JSON.stringify(data), 'pending']
    );
    await db.query('UPDATE users SET state = ? WHERE vk_id = ?', ['waiting_verifing', userId]);
    const applicationId = result.insertId;
    let details = Object.entries(data).map(([key, value]) => ` - ${key.replace(/_/g, ' ')}: ${value}`).join('\n');
    let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [userId]);
    const adminMessage = `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ–¥–∏–∞ üÜî #${applicationId}\nüë§ vk.com/id${userId}\n–ù–∏–∫: ${userInfo?.nickname || '‚Äî'}\n–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏: ${userInfo?.admin_level || 0}\n–ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC\nVK: vk.com/id${userInfo?.vk_id}\n–¢–∏–ø: ${type}\n–î–∞–Ω–Ω—ã–µ:\n${details}\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /acceptmedia ${applicationId}`;
    console.log('[MEDIA][NEW]', adminMessage);
    await vk.api.messages.send({
        peer_id: report_peer_id,
        message: adminMessage,
        random_id: Date.now()
    });
    await user.resetUserState(userId);
    return context.send('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.');
}

async function handleApplicationDecision(applicationId, adminId, decision, vk, type) {
    try {
        let application, applicantId;
        if (type === 'admin') {
            let [[app]] = await db.query('SELECT * FROM admin_applications WHERE id = ?', [applicationId]);
            application = app;
            if (!application || application.status !== 'pending') {
                await vk.api.messages.send({ peer_id: report_peer_id, message: `–ó–∞—è–≤–∫–∞ #${applicationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.`, random_id: Date.now() });
                return;
            }
            applicantId = application.user_vk_id;
            const newStatus = decision === 'approved' ? 'approved' : 'rejected';
            await db.query('UPDATE admin_applications SET status = ? WHERE id = ?', [newStatus, applicationId]);
            if (decision === 'approved') {
                if (application.requested_level === 1) {
                    await db.query('UPDATE users SET admin_level = 1 WHERE vk_id = ?', [applicantId]);
                } else if (application.requested_level === 2) {
                    await db.query('UPDATE users SET admin_level = 2, balance = balance - 345 WHERE vk_id = ?', [applicantId]);
                }
                await vk.api.messages.send({ user_id: applicantId, message: 'üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É –æ–¥–æ–±—Ä–µ–Ω–∞!', random_id: Date.now() });
                await vk.api.messages.send({ peer_id: report_peer_id, message: `‚úÖ –ó–∞—è–≤–∫–∞ #${applicationId} –Ω–∞ –∞–¥–º–∏–Ω–∫—É –æ–¥–æ–±—Ä–µ–Ω–∞!`, random_id: Date.now() });
            } else {
                await db.query('UPDATE users SET admin_level = 0 WHERE vk_id = ?', [applicantId]);
                await vk.api.messages.send({ user_id: applicantId, message: 'üòî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', random_id: Date.now() });
                await vk.api.messages.send({ peer_id: report_peer_id, message: `‚ùå –ó–∞—è–≤–∫–∞ #${applicationId} –Ω–∞ –∞–¥–º–∏–Ω–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!`, random_id: Date.now() });
            }
        } else {
            let [[app]] = await db.query('SELECT * FROM cooperation_applications WHERE id = ?', [applicationId]);
            application = app;
            if (!application || application.status !== 'pending') {
                await vk.api.messages.send({ peer_id: report_peer_id, message: `–ó–∞—è–≤–∫–∞ #${applicationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.`, random_id: Date.now() });
                return;
            }
            applicantId = application.user_vk_id;
            const newStatus = decision === 'approved' ? 'approved' : 'rejected';
            await db.query('UPDATE cooperation_applications SET status = ? WHERE id = ?', [newStatus, applicationId]);
            if (decision === 'approved') {
                await db.query('UPDATE users SET is_approved = 1, state = "verified" WHERE vk_id = ?', [applicantId]);
                // --- –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∏–∑ cooperation_applications.data –≤ users ---
                let [[coopApp]] = await db.query('SELECT * FROM cooperation_applications WHERE id = ?', [applicationId]);
                if (coopApp && coopApp.data) {
                    let data;
                    try { data = JSON.parse(coopApp.data); } catch { data = {}; }
                    if (data.nickname) {
                        await db.query('UPDATE users SET nickname = ? WHERE vk_id = ?', [data.nickname, applicantId]);
                    }
                    if (data.channel_link) {
                        await db.query('UPDATE users SET channel_link = ? WHERE vk_id = ?', [data.channel_link, applicantId]);
                    }
                    if (data.family_name) {
                        await db.query('UPDATE users SET family_name = ? WHERE vk_id = ?', [data.family_name, applicantId]);
                    }
                    if (data.leader_nickname) {
                        await db.query('UPDATE users SET leader_nickname = ? WHERE vk_id = ?', [data.leader_nickname, applicantId]);
                    }
                }
                // –í —Ñ—É–Ω–∫—Ü–∏–∏ handleApplicationDecision, –≤ –±–ª–æ–∫–µ coopApp.type === '–°–µ–º—å–∏', –≤—ã—Å—Ç–∞–≤–∏—Ç—å media_type = 2 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (coopApp && coopApp.type) {
                    let typeLower = coopApp.type.toLowerCase();
                    if (typeLower === '—Å–µ–º—å–∏') {
                        await db.query('UPDATE users SET media_type = 2 WHERE vk_id = ?', [applicantId]);
                    } else if (typeLower === '–ø–ª–∞—Ç–Ω–æ–µ') {
                        await db.query('UPDATE users SET media_type = 1 WHERE vk_id = ?', [applicantId]);
                    } else if (typeLower === '–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ') {
                        await db.query('UPDATE users SET media_type = 0 WHERE vk_id = ?', [applicantId]);
                    }
                }
                await vk.api.messages.send({
                    user_id: applicantId,
                    message: 'üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                    keyboard: keyboards.mainMenuKeyboard,
                    random_id: Date.now()
                });
                await vk.api.messages.send({
                    peer_id: report_peer_id,
                    message: `‚úÖ –ó–∞—è–≤–∫–∞ #${applicationId} –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vk.com/id${applicantId} —Ç–µ–ø–µ—Ä—å –º–µ–¥–∏–∞.`,
                    random_id: Date.now()
                });
                let mediaType = coopApp && coopApp.type ? coopApp.type.toLowerCase() : '';
                let chatLink = '';
                let chatText = '';
                if (mediaType === '–ø–ª–∞—Ç–Ω–æ–µ') {
                    chatLink = 'https://vk.me/join/VmzL2qIbmbsqCWdg963ZSyEi7IV3Xv_v6Yo=';
                    chatText = '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç: [–ü–ª–∞—Ç–Ω—ã–µ –º–µ–¥–∏–∞](https://vk.me/join/VmzL2qIbmbsqCWdg963ZSyEi7IV3Xv_v6Yo=)\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @unclehesus –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.';
                } else if (mediaType === '–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ') {
                    chatLink = 'https://vk.me/join/2uT0meu04IPFZOqNrf_HTWZWP5sEoX2dfUU=';
                    chatText = '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç: [–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ–¥–∏–∞](https://vk.me/join/2uT0meu04IPFZOqNrf_HTWZWP5sEoX2dfUU=)\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @unclehesus –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.';
                }
                await vk.api.messages.send({
                    user_id: applicantId,
                    message: `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ${mediaType} –º–µ–¥–∏–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n${chatText}`,
                    random_id: Date.now(),
                    dont_parse_links: 0
                });
            } else {
                await db.query('UPDATE users SET is_approved = 0, state = "default" WHERE vk_id = ?', [applicantId]);
                await vk.api.messages.send({ user_id: applicantId, message: 'üòî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', random_id: Date.now() });
                await vk.api.messages.send({ peer_id: report_peer_id, message: `‚ùå –ó–∞—è–≤–∫–∞ #${applicationId} –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!`, random_id: Date.now() });
            }
        }
    } catch (e) {
        await vk.api.messages.send({ peer_id: report_peer_id, message: `‚ùå –û—à–∏–±–∫–∞ –≤ handleApplicationDecision: ${e.message}`, random_id: Date.now() });
    }
}

async function handleShopOrderDecision(orderId, adminId, decision, vk) {
    try {
        let [[order]] = await db.query('SELECT * FROM shop_orders WHERE id = ?', [orderId]);
        if (!order || order.status !== 'pending') {
            await vk.api.messages.send({ peer_id: report_peer_id, message: `‚ùóÔ∏è –ó–∞—è–≤–∫–∞ üÜî #${orderId} –Ω–∞ –º–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.`, random_id: Date.now() });
            return;
        }
        const applicantId = order.user_vk_id;
        const newStatus = decision === 'approved' ? 'approved' : 'rejected';
        await db.query('UPDATE shop_orders SET status = ? WHERE id = ?', [newStatus, orderId]);
        if (decision === 'approved') {
            let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [applicantId]);
            await vk.api.messages.send({ user_id: applicantId, message: `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ üÜî #${orderId} –æ–¥–æ–±—Ä–µ–Ω–∞!`, random_id: Date.now() });
            await vk.api.messages.send({ peer_id: report_peer_id, message: `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω üÜî #${orderId} –æ–¥–æ–±—Ä–µ–Ω–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: vk.com/id${applicantId}\n–ù–∏–∫: ${userInfo?.nickname || '‚Äî'}\n–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏: ${userInfo?.admin_level || 0}\n–ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC\nVK: vk.com/id${userInfo?.vk_id}`, random_id: Date.now() });
        } else {
            let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [applicantId]);
            await vk.api.messages.send({ user_id: applicantId, message: `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ üÜî #${orderId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`, random_id: Date.now() });
            await vk.api.messages.send({ peer_id: report_peer_id, message: `‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω üÜî #${orderId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: vk.com/id${applicantId}\n–ù–∏–∫: ${userInfo?.nickname || '‚Äî'}\n–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏: ${userInfo?.admin_level || 0}\n–ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC\nVK: vk.com/id${userInfo?.vk_id}`, random_id: Date.now() });
        }
        console.log(`[handleShopOrderDecision] orderId: ${orderId}, decision: ${decision}, applicantId: ${applicantId}`);
    } catch (e) {
        console.error('[handleShopOrderDecision][ERROR]', e);
        await vk.api.messages.send({ peer_id: report_peer_id, message: `‚ùå –û—à–∏–±–∫–∞ –≤ handleShopOrderDecision: ${e.message}`, random_id: Date.now() });
    }
}

async function handleAcceptReport(reportId, amount, comment, vk, adminId) {
    try {
        let [[report]] = await db.query('SELECT * FROM reports WHERE id = ?', [reportId]);
        if (!report) {
            await vk.api.messages.send({ peer_id: report_peer_id, message: `–û—Ç—á–µ—Ç #${reportId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, random_id: Date.now() });
            return;
        }
        const userId = report.user_vk_id;
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        let [[targetUser]] = await db.query('SELECT * FROM users WHERE vk_id = ?', [userId]);
        if (!targetUser) {
            // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.query('INSERT INTO users (vk_id, state_data) VALUES (?, ?)', [userId, '{}']);
            [[targetUser]] = await db.query('SELECT * FROM users WHERE vk_id = ?', [userId]);
            console.log(`[acceptreport] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vk.com/id${userId} –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ.`);
        }
        await db.query('UPDATE reports SET status = ? WHERE id = ?', ['approved', reportId]);
        await user.changeBalance(userId, amount);
        let [[userInfo]] = await db.query('SELECT nickname, balance, admin_level, vk_id FROM users WHERE vk_id = ?', [userId]);
        await vk.api.messages.send({
            user_id: userId,
            message: `‚úÖ –í–∞—à –æ—Ç—á–µ—Ç #${reportId} –æ–¥–æ–±—Ä–µ–Ω!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${amount} MC.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`,
            random_id: Date.now()
        });
        await vk.api.messages.send({
            peer_id: report_peer_id,
            message: `‚úÖ –û—Ç—á–µ—Ç #${reportId} –æ–¥–æ–±—Ä–µ–Ω.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vk.com/id${userId}\n–ù–∏–∫: ${userInfo?.nickname || '‚Äî'}\n–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏: ${userInfo?.admin_level || 0}\n–ë–∞–ª–∞–Ω—Å: ${userInfo?.balance || 0} MC\nVK: vk.com/id${userInfo?.vk_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vk.com/id${userId} –ø–æ–ª—É—á–∏–ª ${amount} MC.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`,
            random_id: Date.now()
        });
        console.log(`[acceptreport] –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è vk.com/id${userId} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${amount} MC.`);
    } catch (e) {
        await vk.api.messages.send({ peer_id: report_peer_id, message: `‚ùå –û—à–∏–±–∫–∞ –≤ handleAcceptReport: ${e.message}`, random_id: Date.now() });
    }
}
